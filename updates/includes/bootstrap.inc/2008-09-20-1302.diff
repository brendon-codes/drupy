--- drupy/ported/includes/bootstrap.inc	2008-08-13 22:52:58.000000000 -0700
+++ drupal.ported/includes/bootstrap.inc	2008-09-20 12:48:57.000000000 -0700
@@ -1,5 +1,5 @@
 <?php
-// $Id: bootstrap.inc,v 1.218 2008/08/02 19:01:02 dries Exp $
+// $Id: bootstrap.inc,v 1.227 2008/09/19 07:53:59 dries Exp $
 
 /**
  * @file
@@ -181,6 +181,11 @@ define('LANGUAGE_NEGOTIATION_PATH', 2);
 define('LANGUAGE_NEGOTIATION_DOMAIN', 3);
 
 /**
+ * For convenience, define a short form of the request time global.
+ */
+define ('REQUEST_TIME', $_SERVER['REQUEST_TIME']);
+
+/**
  * Start the timer with the specified name. If you start and stop
  * the same timer multiple times, the measured intervals will be
  * accumulated.
@@ -302,16 +307,14 @@ function conf_path($require_settings = T
 }
 
 /**
- * Unsets all disallowed global variables. See $allowed for what's allowed.
+ * Initialize variables needed for the rest of the execution.
  */
-function drupal_unset_globals() {
-  if (ini_get('register_globals')) {
-    $allowed = array('_ENV' => 1, '_GET' => 1, '_POST' => 1, '_COOKIE' => 1, '_FILES' => 1, '_SERVER' => 1, '_REQUEST' => 1, 'GLOBALS' => 1);
-    foreach ($GLOBALS as $key => $value) {
-      if (!isset($allowed[$key])) {
-        unset($GLOBALS[$key]);
-      }
+function drupal_initialize_variables() {
+  if (!isset($_SERVER['HTTP_REFERER'])) {
+    $_SERVER['HTTP_REFERER'] = '';
     }
+  if (!isset($_SERVER['SERVER_PROTOCOL']) || ($_SERVER['SERVER_PROTOCOL'] != 'HTTP/1.0' && $_SERVER['SERVER_PROTOCOL'] != 'HTTP/1.1')) {
+    $_SERVER['SERVER_PROTOCOL'] = 'HTTP/1.0';
   }
 }
 
@@ -323,7 +326,7 @@ function conf_init() {
   global $base_url, $base_path, $base_root;
 
   // Export the following settings.php variables to the global namespace
-  global $db_url, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;
+  global $databases, $db_prefix, $cookie_domain, $conf, $installed_profile, $update_free_access;
   $conf = array();
 
   if (file_exists('./' . conf_path() . '/settings.php')) {
@@ -373,6 +376,15 @@ function conf_init() {
       $cookie_domain = check_plain($_SERVER['HTTP_HOST']);
     }
   }
+  // To prevent session cookies from being hijacked, a user can configure the
+  // SSL version of their website to only transfer session cookies via SSL by
+  // using PHP's session.cookie_secure setting. The browser will then use two
+  // separate session cookies for the HTTPS and HTTP versions of the site. So we
+  // must use different session identifiers for HTTPS and HTTP to prevent a
+  // cookie collision.
+  if (ini_get('session.cookie_secure')) {
+    $session_name .= 'SSL';
+  }
   // Strip leading periods, www., and port numbers from cookie domain.
   $cookie_domain = ltrim($cookie_domain, '.');
   if (strpos($cookie_domain, 'www.') === 0) {
@@ -511,11 +523,7 @@ function variable_get($name, $default) {
 function variable_set($name, $value) {
   global $conf;
 
-  $serialized_value = serialize($value);
-  db_query("UPDATE {variable} SET value = '%s' WHERE name = '%s'", $serialized_value, $name);
-  if (!db_affected_rows()) {
-    @db_query("INSERT INTO {variable} (name, value) VALUES ('%s', '%s')", $name, $serialized_value);
-  }
+  db_merge('variable')->key(array('name' => $name))->fields(array('value' => serialize($value)))->execute();
 
   cache_clear_all('variables', 'cache');
 
@@ -640,7 +648,7 @@ function drupal_page_cache_header($cache
   if ($if_modified_since && $if_none_match
       && $if_none_match == $etag // etag must match
       && $if_modified_since == $last_modified) {  // if-modified-since must match
-    header('HTTP/1.1 304 Not Modified');
+    header($_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified');
     // All 304 responses must send an etag if the 200 response for the same object contained an etag
     header("Etag: $etag");
     exit();
@@ -703,15 +711,6 @@ function drupal_unpack($obj, $field = 'd
 }
 
 /**
- * Return the URI of the referring page.
- */
-function referer_uri() {
-  if (isset($_SERVER['HTTP_REFERER'])) {
-    return $_SERVER['HTTP_REFERER'];
-  }
-}
-
-/**
  * Encode special characters in a plain-text string for display as HTML.
  *
  * Uses drupal_validate_utf8 to prevent cross site scripting attacks on
@@ -804,6 +803,13 @@ function request_uri() {
 function watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL) {
   global $user, $base_root;
 
+  static $in_error_state = FALSE;
+
+  // It is possible that the error handling will itself trigger an error.  In that case, we could
+  // end up in an infinite loop.  To avoid that, we implement a simple static semaphore.
+  if (!$in_error_state) {
+    $in_error_state = TRUE;
+
   // Prepare the fields to be logged
   $log_message = array(
     'type'        => $type,
@@ -813,9 +819,9 @@ function watchdog($type, $message, $vari
     'link'        => $link,
     'user'        => $user,
     'request_uri' => $base_root . request_uri(),
-    'referer'     => referer_uri(),
+      'referer'     => $_SERVER['HTTP_REFERER'],
     'ip'          => ip_address(),
-    'timestamp'   => time(),
+      'timestamp'   => REQUEST_TIME,
     );
 
   // Call the logging hooks to log/process the message
@@ -823,6 +829,8 @@ function watchdog($type, $message, $vari
     module_invoke($module, 'watchdog', $log_message);
   }
 }
+  $in_error_state = FALSE;
+}
 
 /**
  * Set a message which reflects the status of the performed operation.
@@ -964,16 +972,31 @@ function drupal_bootstrap($phase) {
     $current_phase = $phases[$phase_index];
     unset($phases[$phase_index++]);
     _drupal_bootstrap($current_phase);
+
+    global $_drupal_current_bootstrap_phase;
+    $_drupal_current_bootstrap_phase = $current_phase;
   }
 }
 
+/**
+ * Return the current bootstrap phase for this Drupal process.  The
+ * current phase is the one most recently completed by
+ * drupal_bootstrap().
+ *
+ * @see drupal_bootstrap
+ */
+function drupal_get_bootstrap_phase() {
+  global $_drupal_current_bootstrap_phase;
+  return $_drupal_current_bootstrap_phase;
+}
+
 function _drupal_bootstrap($phase) {
   global $conf;
 
   switch ($phase) {
 
     case DRUPAL_BOOTSTRAP_CONFIGURATION:
-      drupal_unset_globals();
+      drupal_initialize_variables();
       // Start a page timer:
       timer_start('page');
       // Initialize the configuration
@@ -994,9 +1017,9 @@ function _drupal_bootstrap($phase) {
       break;
 
     case DRUPAL_BOOTSTRAP_DATABASE:
-      // Initialize the default database.
-      require_once './includes/database.inc';
-      db_set_active();
+      // Initialize the database system.  Note that the connection
+      // won't be initialized until it is actually requested.
+      require_once './includes/database/database.inc';
       // Register autoload functions so that we can access classes and interfaces.
       spl_autoload_register('drupal_autoload_class');
       spl_autoload_register('drupal_autoload_interface');
@@ -1005,7 +1028,7 @@ function _drupal_bootstrap($phase) {
     case DRUPAL_BOOTSTRAP_ACCESS:
       // Deny access to blocked IP addresses - t() is not yet available.
       if (drupal_is_denied(ip_address())) {
-        header('HTTP/1.1 403 Forbidden');
+        header($_SERVER['SERVER_PROTOCOL'] . ' 403 Forbidden');
         print 'Sorry, ' . check_plain(ip_address()) . ' has been banned.';
         exit();
       }
@@ -1013,7 +1036,7 @@ function _drupal_bootstrap($phase) {
 
     case DRUPAL_BOOTSTRAP_SESSION:
       require_once variable_get('session_inc', './includes/session.inc');
-      session_set_save_handler('sess_open', 'sess_close', 'sess_read', 'sess_write', 'sess_destroy_sid', 'sess_gc');
+      session_set_save_handler('_sess_open', '_sess_close', '_sess_read', '_sess_write', '_sess_destroy_sid', '_sess_gc');
       session_start();
       break;
 
@@ -1170,7 +1193,7 @@ function language_default($property = NU
  *   IP address of client machine, adjusted for reverse proxy and/or cluster
  *   environments.
  */
-function ip_address($reset = false) {
+function ip_address($reset = FALSE) {
   static $ip_address = NULL;
 
   if (!isset($ip_address) || $reset) {
@@ -1201,6 +1224,87 @@ function ip_address($reset = false) {
 }
 
 /**
+ * @ingroup schemaapi
+ * @{
+ */
+
+/**
+ * Get the schema definition of a table, or the whole database schema.
+ *
+ * The returned schema will include any modifications made by any
+ * module that implements hook_schema_alter().
+ *
+ * @param $table
+ *   The name of the table. If not given, the schema of all tables is returned.
+ * @param $rebuild
+ *   If true, the schema will be rebuilt instead of retrieved from the cache.
+ */
+function drupal_get_schema($table = NULL, $rebuild = FALSE) {
+  static $schema = array();
+
+  if (empty($schema) || $rebuild) {
+    // Try to load the schema from cache.
+    if (!$rebuild && $cached = cache_get('schema')) {
+      $schema = $cached->data;
+    }
+    // Otherwise, rebuild the schema cache.
+    else {
+      $schema = array();
+      // Load the .install files to get hook_schema.
+      // On some databases this function may be called before bootstrap has
+      // been completed, so we force the functions we need to load just in case.
+      if (drupal_function_exists('module_load_all_includes')) {
+
+        // There is currently a bug in module_list() where it caches what it
+        // was last called with, which is not always what you want.
+        // module_load_all_includes() calls module_list(), but if this function
+        // is called very early in the bootstrap process then it will be
+        // uninitialized and therefore return no modules.  Instead, we have to
+        // "prime" module_list() here to to values we want, specifically
+        // "yes rebuild the list and don't limit to bootstrap".
+        // TODO: Remove this call after http://drupal.org/node/222109 is fixed.
+        module_list(TRUE, FALSE);
+        module_load_all_includes('install');
+      }
+
+      // Invoke hook_schema for all modules.
+      foreach (module_implements('schema') as $module) {
+        $current = module_invoke($module, 'schema');
+        require_once('./includes/common.inc');
+        if (drupal_function_exists('_drupal_initialize_schema')) {
+          _drupal_initialize_schema($module, $current);
+        }
+
+        $schema = array_merge($schema, $current);
+      }
+
+      if (drupal_function_exists('drupal_alter')) {
+        drupal_alter('schema', $schema);
+      }
+
+      if (drupal_get_bootstrap_phase() == DRUPAL_BOOTSTRAP_FULL) {
+        cache_set('schema', $schema);
+      }
+    }
+  }
+
+  if (!isset($table)) {
+    return $schema;
+  }
+  elseif (isset($schema[$table])) {
+    return $schema[$table];
+  }
+  else {
+    return FALSE;
+  }
+}
+
+/**
+ * @} End of "ingroup schemaapi".
+ */
+
+
+/**
  * @ingroup registry
  * @{
  */
@@ -1236,7 +1340,7 @@ function drupal_function_exists($functio
     return TRUE;
   }
 
-  $file = db_result(db_query("SELECT filename FROM {registry} WHERE name = '%s' AND type = '%s'", $function, 'function'));
+  $file = db_result(db_query("SELECT filename FROM {registry} WHERE name = :name AND type = :type", array(':name' => $function, ':type' => 'function')));
   if ($file) {
     require_once($file);
     $checked[$function] = function_exists($function);
@@ -1284,7 +1388,7 @@ function drupal_autoload_class($class) {
  * Helper for registry_check_{interface, class}.
  */
 function _registry_check_code($type, $name) {
-  $file = db_result(db_query("SELECT filename FROM {registry} WHERE name = '%s' AND type = '%s'", $name, $type));
+  $file = db_result(db_query("SELECT filename FROM {registry} WHERE name = :name AND type = :type", array(':name' => $name, ':type' => $type)));
   if ($file) {
     require_once($file);
     registry_mark_code($type, $name);
@@ -1349,7 +1453,7 @@ function registry_cache_hook_implementat
   if ($write_to_persistent_cache === TRUE) {
     // Only write this to cache if the implementations data we are going to cache
     // is different to what we loaded earlier in the request.
-    if ($implementations != registry_get_hook_implementations_cache()) {
+    if ($implementations != module_implements()) {
       cache_set('hooks', $implementations, 'cache_registry');
     }
   }
@@ -1404,22 +1508,5 @@ function registry_load_path_files($retur
 }
 
 /**
- * registry_get_hook_implementations_cache
- */
-function registry_get_hook_implementations_cache() {
-  static $implementations;
-  if ($implementations === NULL) {
-    if ($cache = cache_get('hooks', 'cache_registry')) {
-      $implementations = $cache->data;
-    }
-    else {
-      $implementations = array();
-    }
-  }
-  return $implementations;
-}
-
-/**
  * @} End of "ingroup registry".
  */
-
