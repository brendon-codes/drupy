##
## About This Document
##

  author Brendon Crawford
  copyright 2008 Brendon Crawford
  contact message144 at users dot sourceforge dot net
  created 2008-01-10
  version 0.2

##
## License
##

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.
  
  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


##
## Drupy: Drupal in Python
##

  In a nutshell, Drupy aims to offer Drupal in Python.

##
## Primary Objectives
##

  (1) Offer function/class/module level compatibility with Drupal HEAD.
  
  This allows for the following:
  
   a) Documentation reusability
   b) Portability of user-contributed Drupal modules
   c) Possible endorsement from the Drupal project
   d) Portability of Drupal core enhancements
   e) Easy transition for current Drupal users
  
  The policy until now has been to make whatever improvements necessary within API functions withoutÂ modifying the external interfaces to those functions and/or classes.
  
  (2) Improve namespace support
  
  For the first release of Drupy, it will not be practical to completely compartmentalize every component. However, there are certain key areas where namespace support can be drastically improved, such as in Drupal modules. The policy until now has been that core includes will remain in the global namespace but all Drupal modules, both core and non core will remain within their respective namespaces.
  
  (3) Implement security and performance improvements where possible.
  
  Drupal is not necesarily known for security and performance. Of course with any application with the scope and flexibility of Drupal, security and performnce become more difficult to maintain.
  
  Where possible, Drupy seeks to add improvements, but only where it will not drastically break current functionality. Great care needs to be taken to maintain a balance.
  
  (4) Improve theming support
  
  Obviously, Drupy cannot completely mimic the PHPTemplate engine, but the strengths of PHPTemplate can certainly be embraced. Embedding application code such as PHP directly into HTML is far from preferable.
  
  My goal for theming is to take the general principles of PHPTemplate and apply them in the context of a good templating engine such as Mako.

##
## Status of Project
##

  I had spent about 5 months in the planning stages for the Drupy project. This involved weighing out many of the difficult choices to be made when porting Drupal. Drupal was in no way written "elegantly", but it does its job quite well. A lot of Drupal lack of elegance comes from the inherent lack of elegance in PHP itself.

  Currently, this is what we have:
  
  (1) A robust and well tested PHP function abstraction module for Python. This allows us to use most Drupal function calls without any modification. (Examples: preg_replace, isset, empty, ob_start)
  
  (2) About 11 of the big Drupal core includes working
  
  (3) Bootstrap Stage 5 is completed
  
  (4) Beginning stages of theming support
    

##
## Call to Action
##
 
  The following would be greatly beneficial to the Drupy project:

  (1) Money

  (2) Experienced Python and Drupal developers

  (3) Documentation writers

##
## Contact
##

  Website: http://drupy.net
  Sourceforge: http://sourceforge.net/projects/drupy
  http://gitorious.org/projects/drupy
  IRC: #drupy at freenode
  



