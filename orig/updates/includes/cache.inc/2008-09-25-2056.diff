--- drupy/ported/includes/cache.inc	2008-08-13 23:07:10.000000000 -0700
+++ drupal.ported/includes/cache.inc	2008-09-20 12:48:57.000000000 -0700
@@ -1,15 +1,17 @@
 <?php
-// $Id: cache.inc,v 1.20 2008/07/02 20:42:25 dries Exp $
+// $Id: cache.inc,v 1.24 2008/09/17 07:11:55 dries Exp $
 
 /**
- * Return data from the persistent cache. Data may be stored as either plain text or as serialized data.
- * cache_get will automatically return unserialized objects and arrays.
+ * Return data from the persistent cache. Data may be stored as either plain 
+ * text or as serialized data. cache_get will automatically return 
+ * unserialized objects and arrays.
  *
  * @param $cid
  *   The cache ID of the data to retrieve.
  * @param $table
- *   The table $table to store the data in. Valid core values are 'cache_filter',
- *   'cache_menu', 'cache_page', or 'cache' for the default cache.
+ *   The table $table to store the data in. Valid core values are 
+ *   'cache_filter', 'cache_menu', 'cache_page', or 'cache' for 
+ *   the default cache.
  * @return The cache or FALSE on failure.
  */
 function cache_get($cid, $table = 'cache') {
@@ -17,7 +19,7 @@ function cache_get($cid, $table = 'cache
 
   // Garbage collection necessary when enforcing a minimum cache lifetime
   $cache_flush = variable_get('cache_flush', 0);
-  if ($cache_flush && ($cache_flush + variable_get('cache_lifetime', 0) <= time())) {
+  if ($cache_flush && ($cache_flush + variable_get('cache_lifetime', 0) <= REQUEST_TIME)) {
     // Reset the variable immediately to prevent a meltdown in heavy load situations.
     variable_set('cache_flush', 0);
     // Time to flush old cache data
@@ -29,7 +31,6 @@ function cache_get($cid, $table = 'cache
     // If the data is permanent or we're not enforcing a minimum cache lifetime
     // always return the cached data.
     if ($cache->expire == CACHE_PERMANENT || !variable_get('cache_lifetime', 0)) {
-      $cache->data = db_decode_blob($cache->data);
       if ($cache->serialized) {
         $cache->data = unserialize($cache->data);
       }
@@ -38,14 +39,13 @@ function cache_get($cid, $table = 'cache
     // currently valid for this user before we return it by making sure the
     // cache entry was created before the timestamp in the current session's
     // cache timer. The cache variable is loaded into the $user object by
-    // sess_read() in session.inc.
+    // _sess_read() in session.inc.
     else {
       if ($user->cache > $cache->created) {
         // This cache data is too old and thus not valid for us, ignore it.
         return FALSE;
       }
       else {
-        $cache->data = db_decode_blob($cache->data);
         if ($cache->serialized) {
           $cache->data = unserialize($cache->data);
         }
@@ -84,11 +84,12 @@ function cache_get($cid, $table = 'cache
  * @param $cid
  *   The cache ID of the data to store.
  * @param $data
- *   The data to store in the cache. Complex data types will be automatically serialized before insertion.
+ *   The data to store in the cache. Complex data types will be automatically 
+ *   serialized before insertion.
  *   Strings will be stored as plain text and not serialized.
  * @param $table
- *   The table $table to store the data in. Valid core values are 'cache_filter',
- *   'cache_menu', 'cache_page', or 'cache'.
+ *   The table $table to store the data in. Valid core values are 
+ *   'cache_filter', 'cache_menu', 'cache_page', or 'cache'.
  * @param $expire
  *   One of the following values:
  *   - CACHE_PERMANENT: Indicates that the item should never be removed unless
@@ -101,16 +102,22 @@ function cache_get($cid, $table = 'cache
  *   A string containing HTTP header information for cached pages.
  */
 function cache_set($cid, $data, $table = 'cache', $expire = CACHE_PERMANENT, $headers = NULL) {
-  $serialized = 0;
+  $fields = array(
+    'serialized' => 0,
+    'created' => REQUEST_TIME,
+    'expire' => $expire,
+    'headers' => $headers,
+  );
   if (!is_string($data)) {
-    $data = serialize($data);
-    $serialized = 1;
+    $fields['data'] = serialize($data);
+    $fields['serialized'] = 1;
   }
-  $created = time();
-  db_query("UPDATE {" . $table . "} SET data = %b, created = %d, expire = %d, headers = '%s', serialized = %d WHERE cid = '%s'", $data, $created, $expire, $headers, $serialized, $cid);
-  if (!db_affected_rows()) {
-    @db_query("INSERT INTO {" . $table . "} (cid, data, created, expire, headers, serialized) VALUES ('%s', %b, %d, %d, '%s', %d)", $cid, $data, $created, $expire, $headers, $serialized);
+  else {
+    $fields['data'] = $data;
+    $fields['serialized'] = 0;
   }
+
+  db_merge($table)->key(array('cid' => $cid))->fields($fields)->execute();
 }
 
 /**
@@ -145,39 +152,39 @@ function cache_clear_all($cid = NULL, $t
   if (empty($cid)) {
     if (variable_get('cache_lifetime', 0)) {
       // We store the time in the current user's $user->cache variable which
-      // will be saved into the sessions table by sess_write(). We then
+      // will be saved into the sessions table by _sess_write(). We then
       // simulate that the cache was flushed for this user by not returning
       // cached data that was cached before the timestamp.
-      $user->cache = time();
+      $user->cache = REQUEST_TIME;
 
       $cache_flush = variable_get('cache_flush', 0);
       if ($cache_flush == 0) {
         // This is the first request to clear the cache, start a timer.
-        variable_set('cache_flush', time());
+        variable_set('cache_flush', REQUEST_TIME);
       }
-      else if (time() > ($cache_flush + variable_get('cache_lifetime', 0))) {
+      else if (REQUEST_TIME > ($cache_flush + variable_get('cache_lifetime', 0))) {
         // Clear the cache for everyone, cache_flush_delay seconds have
         // passed since the first request to clear the cache.
-        db_query("DELETE FROM {" . $table . "} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());
+        db_query("DELETE FROM {" . $table . "} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, REQUEST_TIME);
         variable_set('cache_flush', 0);
       }
     }
     else {
       // No minimum cache lifetime, flush all temporary cache entries now.
-      db_query("DELETE FROM {" . $table . "} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, time());
+      db_query("DELETE FROM {" . $table . "} WHERE expire != %d AND expire < %d", CACHE_PERMANENT, REQUEST_TIME);
     }
   }
   else {
     if ($wildcard) {
       if ($cid == '*') {
-        db_query("DELETE FROM {" . $table . "}");
+        db_delete($table)->execute();
       }
       else {
-        db_query("DELETE FROM {" . $table . "} WHERE cid LIKE '%s%%'", $cid);
+        db_delete($table)->condition('cid', $cid .'%', 'LIKE')->execute();
       }
     }
     else {
-      db_query("DELETE FROM {" . $table . "} WHERE cid = '%s'", $cid);
+      db_delete($table)->condition('cid', $cid)->execute();
     }
   }
 }
