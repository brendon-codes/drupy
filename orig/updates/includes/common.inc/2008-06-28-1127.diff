--- drupy/ported/includes/common.inc	2008-06-27 16:42:26.000000000 -0700
+++ drupal/includes/common.inc	2008-06-28 11:24:30.000000000 -0700
@@ -1,5 +1,5 @@
 <?php
-// $Id: common.inc,v 1.771 2008/06/09 08:11:44 dries Exp $
+// $Id: common.inc,v 1.773 2008/06/24 22:09:52 dries Exp $
 
 /**
  * @file
@@ -414,6 +414,7 @@ function drupal_access_denied() {
  *   data and redirect status.
  */
 function drupal_http_request($url, $headers = array(), $method = 'GET', $data = NULL, $retry = 3) {
+  global $db_prefix;
   static $self_test = FALSE;
   $result = new stdClass();
   // Try to clear the drupal_http_request_fails variable if it's set. We
@@ -482,6 +483,16 @@ function drupal_http_request($url, $head
     $defaults['Authorization'] = 'Authorization: Basic ' . base64_encode($uri['user'] . (!empty($uri['pass']) ? ":" . $uri['pass'] : ''));
   }
 
+  // If the database prefix is being used by SimpleTest to run the tests in a copied
+  // database then set the user-agent header to the database prefix so that any
+  // calls to other Drupal pages will run the SimpleTest prefixed database. The
+  // user-agent is used to ensure that multiple testing sessions running at the
+  // same time won't interfere with each other as they would if the database
+  // prefix were stored statically in a file or database variable.
+  if (preg_match("/^simpletest\d+/", $db_prefix)) {
+    $headers['User-Agent'] = $db_prefix;
+  }
+
   foreach ($headers as $header => $value) {
     $defaults[$header] = $header . ': ' . $value;
   }
@@ -819,7 +830,7 @@ function valid_email_address($mail) {
   $ipv4 = '[0-9]{1,3}(\.[0-9]{1,3}){3}';
   $ipv6 = '[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7}';
 
-  return preg_match("/^$user@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
+  return (bool)preg_match("/^$user@($domain|(\[($ipv4|$ipv6)\]))$/", $mail);
 }
 
 /**
@@ -838,10 +849,10 @@ function valid_email_address($mail) {
 function valid_url($url, $absolute = FALSE) {
   $allowed_characters = '[a-z0-9\/:_\-_\.\?\$,;~=#&%\+]';
   if ($absolute) {
-    return preg_match("/^(http|https|ftp):\/\/" . $allowed_characters . "+$/i", $url);
+    return (bool)preg_match("/^(http|https|ftp):\/\/" . $allowed_characters . "+$/i", $url);
   }
   else {
-    return preg_match("/^" . $allowed_characters . "+$/i", $url);
+    return (bool)preg_match("/^" . $allowed_characters . "+$/i", $url);
   }
 }
 
